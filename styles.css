*, *::before, *::after {
    box-sizing: border-box;
}

body {
    background-color: #143F6b;
    margin: 0;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.piano {
    /* ensures keys are lined up side by side. Body only makes sure that all components are lined up side by side which would be disadvantagious if there were multiple pianos. */
    display: flex;
}

.key {
    /* diy method. Use calculations from the width to generate a height for each key. With this you can eliminate two lines of code referring to height. */
    width: var(--width);
    height: calc(var(--width) * 4);
}

.white {
    --width: 100px;
    background-color: white;
    border: 1px solid #333;
}

.white.active {
    background: #ccc;
}

.black {
    /* height is initiated from top to bottom. It drips like blood on the walls. */
    /* css variable example. The hyphens prior refer to when the var was first introduced in the .key class. */
    --width: 60px;
    background-color: black;
    /* negative margins ensure that the black notes do not take up their own space. Closer to image of typical piano. */
    margin-left: -30px;
    /* alternative margin-left and right can also use the css variable formulas.
    ex. calc(var(--width) / -2);
    this still provides the answer of -30px.
    I prefer just saying pxs out right. But if I have to work with media query this method would be preferred as it would cut down on code significatnly because the calculations would always be running instead of having to mentally recalulate the margins precisely on our on own. Less code would mean that the site would run quicker.
    For now leave it. Alter it in the future. Leave these notes for future viewers. */
    margin-right: -30px;
    z-index: 2;
}

.black.active {
    background-color: #333;
}